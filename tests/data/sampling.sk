// This is an autogenerated sketch file corresponding to
// the router's data path and is used to solve the Chipmunk compilation problem.
// program_file = example_specs/sampling.sk num_pipeline_stages = 2
// num_alus_per_stage = 1
// num_phv_containers = 1

int[4] constant_vector = {0, 1, 2, 3};

int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_Opt_2_global = 0;
int sampling_if_else_raw_stateless_alu_2_1_stateless_alu_1_0_mux1_ctrl = 0;
int sampling_if_else_raw_stateless_alu_2_1_stateful_operand_mux_0_0_1_ctrl = 0;
int sampling_if_else_raw_stateless_alu_2_1_stateful_operand_mux_1_0_1_ctrl = 0;
int sampling_if_else_raw_stateless_alu_2_1_stateless_alu_1_0_opcode = 14;
int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_const_0_global = 1;
int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_const_1_global = 0;
int sampling_if_else_raw_stateless_alu_2_1_stateless_alu_0_0_mux1_ctrl = 0;
int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_Opt_2_global = 0;
int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_Opt_0_global = 0;
int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_Opt_1_global = 0;
int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_const_2_global = 1;
int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_rel_op_0_global = 0;
int sampling_if_else_raw_stateless_alu_2_1_stateless_alu_1_0_mux3_ctrl = 0;
int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_Mux3_0_global = 0;
int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_rel_op_0_global = 3;
int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_const_1_global = 0;
int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_Mux3_1_global = 2;
int sampling_if_else_raw_stateless_alu_2_1_stateless_alu_0_0_mux3_ctrl = 0;
int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_Opt_0_global = 0;
int sampling_if_else_raw_stateless_alu_2_1_output_mux_phv_1_0_ctrl = 0;
int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_Mux3_1_global = 2;
int sampling_if_else_raw_stateless_alu_2_1_stateless_alu_0_0_opcode = 4;
int sampling_if_else_raw_stateless_alu_2_1_stateless_alu_0_0_mux2_ctrl = 0;
int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_const_2_global = 1;
int sampling_if_else_raw_stateless_alu_2_1_stateless_alu_1_0_mux2_ctrl = 0;
int sampling_if_else_raw_stateless_alu_2_1_salu_config_0_0 = 1;
int sampling_if_else_raw_stateless_alu_2_1_salu_config_1_0 = 0;
int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_output_mux_global =
    0;
int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_Mux3_2_global = 2;
int sampling_if_else_raw_stateless_alu_2_1_stateful_operand_mux_1_0_0_ctrl = 0;
int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_const_0_global = 2;
int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_Opt_1_global = 1;
int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_Mux3_0_global = 2;
int sampling_if_else_raw_stateless_alu_2_1_output_mux_phv_0_0_ctrl = 0;
int sampling_if_else_raw_stateless_alu_2_1_stateful_operand_mux_0_0_0_ctrl = 0;
int sampling_if_else_raw_stateless_alu_2_1_stateless_alu_1_0_immediate = 2;
int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_Mux3_2_global = 2;
int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_output_mux_global =
    0;
int sampling_if_else_raw_stateless_alu_2_1_stateless_alu_0_0_immediate = 2;

// Definitions of muxes and ALUs of the router
// Operand muxes for each ALU in each stage
// Total of 2 * 1 * 3 1-to-1 muxes
// The 3 is for two stateless operands and one stateful operand.

int sampling_if_else_raw_stateless_alu_2_1_stateful_operand_mux_0_0_0(
    int input0,
    int sampling_if_else_raw_stateless_alu_2_1_stateful_operand_mux_0_0_0_ctrl_local) {
  return input0;
}
int sampling_if_else_raw_stateless_alu_2_1_stateful_operand_mux_0_0_1(
    int input0,
    int sampling_if_else_raw_stateless_alu_2_1_stateful_operand_mux_0_0_1_ctrl_local) {
  return input0;
}
int sampling_if_else_raw_stateless_alu_2_1_stateful_operand_mux_1_0_0(
    int input0,
    int sampling_if_else_raw_stateless_alu_2_1_stateful_operand_mux_1_0_0_ctrl_local) {
  return input0;
}
int sampling_if_else_raw_stateless_alu_2_1_stateful_operand_mux_1_0_1(
    int input0,
    int sampling_if_else_raw_stateless_alu_2_1_stateful_operand_mux_1_0_1_ctrl_local) {
  return input0;
}

// Output mux for each PHV container
// Allows the container to be written from either its own stateless ALU or any
// stateful ALU

int sampling_if_else_raw_stateless_alu_2_1_output_mux_phv_0_0(
    int input0, int input1,
    int sampling_if_else_raw_stateless_alu_2_1_output_mux_phv_0_0_ctrl_local) {
  int mux_ctrl =
      sampling_if_else_raw_stateless_alu_2_1_output_mux_phv_0_0_ctrl_local;
  if (mux_ctrl == 0) {
    return input0;
  }

  else {
    return input1;
  }
}
int sampling_if_else_raw_stateless_alu_2_1_output_mux_phv_1_0(
    int input0, int input1,
    int sampling_if_else_raw_stateless_alu_2_1_output_mux_phv_1_0_ctrl_local) {
  int mux_ctrl =
      sampling_if_else_raw_stateless_alu_2_1_output_mux_phv_1_0_ctrl_local;
  if (mux_ctrl == 0) {
    return input0;
  }

  else {
    return input1;
  }
}

// Definition for ALUs

int sampling_if_else_raw_stateless_alu_2_1_stateless_alu_0_0_mux1(
    int input0,
    int sampling_if_else_raw_stateless_alu_2_1_stateless_alu_0_0_mux1_ctrl_local) {
  return input0;
}
int sampling_if_else_raw_stateless_alu_2_1_stateless_alu_0_0_mux2(
    int input0,
    int sampling_if_else_raw_stateless_alu_2_1_stateless_alu_0_0_mux2_ctrl_local) {
  return input0;
}
int sampling_if_else_raw_stateless_alu_2_1_stateless_alu_0_0_mux3(
    int input0,
    int sampling_if_else_raw_stateless_alu_2_1_stateless_alu_0_0_mux3_ctrl_local) {
  return input0;
}
int sampling_if_else_raw_stateless_alu_2_1_stateless_alu_0_0(
    int input0, int opcode_hole_local, int immediate_operand_hole_local,
    int mux1_ctrl_hole_local, int mux2_ctrl_hole_local,
    int mux3_ctrl_hole_local) {
  int immediate_operand = constant_vector[immediate_operand_hole_local];
  int opcode = opcode_hole_local;
  int pkt_0 = sampling_if_else_raw_stateless_alu_2_1_stateless_alu_0_0_mux1(
      input0, mux1_ctrl_hole_local);
  int pkt_1 = sampling_if_else_raw_stateless_alu_2_1_stateless_alu_0_0_mux2(
      input0, mux2_ctrl_hole_local);
  int pkt_2 = sampling_if_else_raw_stateless_alu_2_1_stateless_alu_0_0_mux3(
      input0, mux3_ctrl_hole_local);
  if (opcode == 0) {
    return immediate_operand;
  } else if (opcode == 1) {
    return pkt_0 + pkt_1;
  } else if (opcode == 2) {
    return pkt_0 + immediate_operand;
  } else if (opcode == 3) {
    return pkt_0 - pkt_1;
  } else if (opcode == 4) {
    return pkt_0 - immediate_operand;
  } else if (opcode == 5) {
    return immediate_operand - pkt_0;
  } else if (opcode == 6) {
    return pkt_0 != pkt_1;
  } else if (opcode == 7) {
    return (pkt_0 != immediate_operand);
  } else if (opcode == 8) {
    return (pkt_0 == pkt_1);
  } else if (opcode == 9) {
    return (pkt_0 == immediate_operand);
  } else if (opcode == 10) {
    return (pkt_0 >= pkt_1);
  } else if (opcode == 11) {
    return (pkt_0 >= immediate_operand);
  } else if (opcode == 12) {
    return (pkt_0 < pkt_1);
  } else if (opcode == 13) {
    return (pkt_0 < immediate_operand);
  } else if (opcode == 14) {
    if (pkt_0 != 0) {
      return pkt_1;
    } else {
      return pkt_2;
    }

  } else if (opcode == 15) {
    if (pkt_0 != 0) {
      return pkt_1;
    } else {
      return immediate_operand;
    }

  } else if (opcode == 16) {
    return ((pkt_0 != 0) || (pkt_1 != 0));
  } else if (opcode == 17) {
    return ((pkt_0 != 0) || (immediate_operand != 0));
  } else if (opcode == 18) {
    return ((pkt_0 != 0) && (pkt_1 != 0));
  } else if (opcode == 19) {
    return ((pkt_0 != 0) && (immediate_operand != 0));
  } else {
    return ((pkt_0 == 0));
  }
}

int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_Opt_0(int op1,
                                                                  int enable) {
  if (enable != 0)
    return 0;
  return op1;
}

int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_C_0(int const) {
  return constant_vector[const];
}

int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_Mux3_0(int op1,
                                                                   int op2,
                                                                   int op3,
                                                                   int choice) {
  if (choice == 0)
    return op1;
  else if (choice == 1)
    return op2;
  else
    return op3;
}

int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_rel_op_0(
    int operand1, int operand2, int opcode) {
  if (opcode == 0) {
    return (operand1 != operand2) ? 1 : 0;
  } else if (opcode == 1) {
    return (operand1 < operand2) ? 1 : 0;
  } else if (opcode == 2) {
    return (operand1 > operand2) ? 1 : 0;
  } else {
    return (operand1 == operand2) ? 1 : 0;
  }
}

int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_Opt_1(int op1,
                                                                  int enable) {
  if (enable != 0)
    return 0;
  return op1;
}

int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_C_1(int const) {
  return constant_vector[const];
}

int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_Mux3_1(int op1,
                                                                   int op2,
                                                                   int op3,
                                                                   int choice) {
  if (choice == 0)
    return op1;
  else if (choice == 1)
    return op2;
  else
    return op3;
}

int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_Opt_2(int op1,
                                                                  int enable) {
  if (enable != 0)
    return 0;
  return op1;
}

int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_C_2(int const) {
  return constant_vector[const];
}

int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_Mux3_2(int op1,
                                                                   int op2,
                                                                   int op3,
                                                                   int choice) {
  if (choice == 0)
    return op1;
  else if (choice == 1)
    return op2;
  else
    return op3;
}

| StateGroup | sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0(
                   ref | StateGroup | state_group, int output_mux, int pkt_0,
                   int pkt_1, int Mux3_0, int Mux3_1, int Mux3_2, int Opt_0,
                   int Opt_1, int Opt_2, int const_0, int const_1, int const_2,
                   int output_mux, int rel_op_0) {
  | StateGroup | old_state_group = state_group;
  int state_0 = state_group.state_0;
  if (sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_rel_op_0(
          sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_Opt_0(state_0,
                                                                        Opt_0),
          sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_Mux3_0(
              pkt_0, pkt_1,
              sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_C_0(
                  const_0),
              Mux3_0),
          rel_op_0) == 1) {
    state_0 = sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_Opt_1(
                  state_0, Opt_1) +
              sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_Mux3_1(
                  pkt_0, pkt_1,
                  sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_C_1(
                      const_1),
                  Mux3_1);
  } else {
    state_0 = sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_Opt_2(
                  state_0, Opt_2) +
              sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_Mux3_2(
                  pkt_0, pkt_1,
                  sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_C_2(
                      const_2),
                  Mux3_2);
  }
  state_group.state_0 = state_0;

  if (output_mux == 1) {
    return old_state_group;
  } else {
    return state_group;
  }
}

int sampling_if_else_raw_stateless_alu_2_1_stateless_alu_1_0_mux1(
    int input0,
    int sampling_if_else_raw_stateless_alu_2_1_stateless_alu_1_0_mux1_ctrl_local) {
  return input0;
}
int sampling_if_else_raw_stateless_alu_2_1_stateless_alu_1_0_mux2(
    int input0,
    int sampling_if_else_raw_stateless_alu_2_1_stateless_alu_1_0_mux2_ctrl_local) {
  return input0;
}
int sampling_if_else_raw_stateless_alu_2_1_stateless_alu_1_0_mux3(
    int input0,
    int sampling_if_else_raw_stateless_alu_2_1_stateless_alu_1_0_mux3_ctrl_local) {
  return input0;
}
int sampling_if_else_raw_stateless_alu_2_1_stateless_alu_1_0(
    int input0, int opcode_hole_local, int immediate_operand_hole_local,
    int mux1_ctrl_hole_local, int mux2_ctrl_hole_local,
    int mux3_ctrl_hole_local) {
  int immediate_operand = constant_vector[immediate_operand_hole_local];
  int opcode = opcode_hole_local;
  int pkt_0 = sampling_if_else_raw_stateless_alu_2_1_stateless_alu_1_0_mux1(
      input0, mux1_ctrl_hole_local);
  int pkt_1 = sampling_if_else_raw_stateless_alu_2_1_stateless_alu_1_0_mux2(
      input0, mux2_ctrl_hole_local);
  int pkt_2 = sampling_if_else_raw_stateless_alu_2_1_stateless_alu_1_0_mux3(
      input0, mux3_ctrl_hole_local);
  if (opcode == 0) {
    return immediate_operand;
  } else if (opcode == 1) {
    return pkt_0 + pkt_1;
  } else if (opcode == 2) {
    return pkt_0 + immediate_operand;
  } else if (opcode == 3) {
    return pkt_0 - pkt_1;
  } else if (opcode == 4) {
    return pkt_0 - immediate_operand;
  } else if (opcode == 5) {
    return immediate_operand - pkt_0;
  } else if (opcode == 6) {
    return pkt_0 != pkt_1;
  } else if (opcode == 7) {
    return (pkt_0 != immediate_operand);
  } else if (opcode == 8) {
    return (pkt_0 == pkt_1);
  } else if (opcode == 9) {
    return (pkt_0 == immediate_operand);
  } else if (opcode == 10) {
    return (pkt_0 >= pkt_1);
  } else if (opcode == 11) {
    return (pkt_0 >= immediate_operand);
  } else if (opcode == 12) {
    return (pkt_0 < pkt_1);
  } else if (opcode == 13) {
    return (pkt_0 < immediate_operand);
  } else if (opcode == 14) {
    if (pkt_0 != 0) {
      return pkt_1;
    } else {
      return pkt_2;
    }

  } else if (opcode == 15) {
    if (pkt_0 != 0) {
      return pkt_1;
    } else {
      return immediate_operand;
    }

  } else if (opcode == 16) {
    return ((pkt_0 != 0) || (pkt_1 != 0));
  } else if (opcode == 17) {
    return ((pkt_0 != 0) || (immediate_operand != 0));
  } else if (opcode == 18) {
    return ((pkt_0 != 0) && (pkt_1 != 0));
  } else if (opcode == 19) {
    return ((pkt_0 != 0) && (immediate_operand != 0));
  } else {
    return ((pkt_0 == 0));
  }
}

int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_Opt_0(int op1,
                                                                  int enable) {
  if (enable != 0)
    return 0;
  return op1;
}

int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_C_0(int const) {
  return constant_vector[const];
}

int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_Mux3_0(int op1,
                                                                   int op2,
                                                                   int op3,
                                                                   int choice) {
  if (choice == 0)
    return op1;
  else if (choice == 1)
    return op2;
  else
    return op3;
}

int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_rel_op_0(
    int operand1, int operand2, int opcode) {
  if (opcode == 0) {
    return (operand1 != operand2) ? 1 : 0;
  } else if (opcode == 1) {
    return (operand1 < operand2) ? 1 : 0;
  } else if (opcode == 2) {
    return (operand1 > operand2) ? 1 : 0;
  } else {
    return (operand1 == operand2) ? 1 : 0;
  }
}

int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_Opt_1(int op1,
                                                                  int enable) {
  if (enable != 0)
    return 0;
  return op1;
}

int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_C_1(int const) {
  return constant_vector[const];
}

int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_Mux3_1(int op1,
                                                                   int op2,
                                                                   int op3,
                                                                   int choice) {
  if (choice == 0)
    return op1;
  else if (choice == 1)
    return op2;
  else
    return op3;
}

int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_Opt_2(int op1,
                                                                  int enable) {
  if (enable != 0)
    return 0;
  return op1;
}

int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_C_2(int const) {
  return constant_vector[const];
}

int sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_Mux3_2(int op1,
                                                                   int op2,
                                                                   int op3,
                                                                   int choice) {
  if (choice == 0)
    return op1;
  else if (choice == 1)
    return op2;
  else
    return op3;
}

| StateGroup | sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0(
                   ref | StateGroup | state_group, int output_mux, int pkt_0,
                   int pkt_1, int Mux3_0, int Mux3_1, int Mux3_2, int Opt_0,
                   int Opt_1, int Opt_2, int const_0, int const_1, int const_2,
                   int output_mux, int rel_op_0) {
  | StateGroup | old_state_group = state_group;
  int state_0 = state_group.state_0;
  if (sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_rel_op_0(
          sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_Opt_0(state_0,
                                                                        Opt_0),
          sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_Mux3_0(
              pkt_0, pkt_1,
              sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_C_0(
                  const_0),
              Mux3_0),
          rel_op_0) == 1) {
    state_0 = sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_Opt_1(
                  state_0, Opt_1) +
              sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_Mux3_1(
                  pkt_0, pkt_1,
                  sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_C_1(
                      const_1),
                  Mux3_1);
  } else {
    state_0 = sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_Opt_2(
                  state_0, Opt_2) +
              sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_Mux3_2(
                  pkt_0, pkt_1,
                  sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_C_2(
                      const_2),
                  Mux3_2);
  }
  state_group.state_0 = state_0;

  if (output_mux == 1) {
    return old_state_group;
  } else {
    return state_group;
  }
}

struct StateGroup {
  int state_0;
}

// Data type for holding result from spec and implementation
struct StateAndPacket {
  int pkt_0;
  int state_group_0_state_0;
}

    // Specification
    /*
    // Original program:
    struct Packet {
      int pkt_0;
    };
    int state_group_0_state_0 = 0;
    void func(struct Packet p) {
      if (state_group_0_state_0 == 3 - 1) {
        p.pkt_0 = 1;
        state_group_0_state_0 = 0;

        ;
      } else {
        p.pkt_0 = 0;
        state_group_0_state_0 = state_group_0_state_0 + 1;
      }
    }
    */

    | StateAndPacket | program(| StateAndPacket | state_and_packet) {
  if (state_and_packet.state_group_0_state_0 == 3 - 1) {
    state_and_packet.pkt_0 = 1;
    state_and_packet.state_group_0_state_0 = 0;
  } else {
    state_and_packet.pkt_0 = 0;
    state_and_packet.state_group_0_state_0 =
        state_and_packet.state_group_0_state_0 + 1;
  }
  return state_and_packet;
}

// Implementation
| StateAndPacket | pipeline(| StateAndPacket | state_and_packet) {
  // Any additional constraints to speed up synthesis through parallel
  // execution.

  // Consolidate all constraints on holes here.
  assert(
      (sampling_if_else_raw_stateless_alu_2_1_stateless_alu_0_0_opcode == 1) ||
      (sampling_if_else_raw_stateless_alu_2_1_stateless_alu_0_0_mux1_ctrl <=
       sampling_if_else_raw_stateless_alu_2_1_stateless_alu_0_0_mux2_ctrl));
  assert(
      (sampling_if_else_raw_stateless_alu_2_1_stateless_alu_1_0_opcode == 1) ||
      (sampling_if_else_raw_stateless_alu_2_1_stateless_alu_1_0_mux1_ctrl <=
       sampling_if_else_raw_stateless_alu_2_1_stateless_alu_1_0_mux2_ctrl));
  assert((sampling_if_else_raw_stateless_alu_2_1_salu_config_0_0 + 0) <= 1);
  assert((sampling_if_else_raw_stateless_alu_2_1_salu_config_1_0 + 0) <= 1);
  assert((sampling_if_else_raw_stateless_alu_2_1_salu_config_0_0 +
          sampling_if_else_raw_stateless_alu_2_1_salu_config_1_0 + 0) <= 1);

  // One variable for each container in the PHV
  // Container i will be allocated to packet field i from the spec.
  int input_0_0 = 0;

  // One variable for each stateful ALU's state operand
  // This will be allocated to a state variable from the program using indicator
  // variables.
  | StateGroup | state_operand_salu_0_0 = | StateGroup | (state_0 = 0);
  | StateGroup | state_operand_salu_1_0 = | StateGroup | (state_0 = 0);

  /*********** Stage 0 *********/

  // Inputs
  // Read each PHV container from corresponding packet field.
  input_0_0 = state_and_packet.pkt_0;

  // Stateless ALUs
  int destination_0_0 =
      sampling_if_else_raw_stateless_alu_2_1_stateless_alu_0_0(
          input_0_0,

          sampling_if_else_raw_stateless_alu_2_1_stateless_alu_0_0_opcode,
          sampling_if_else_raw_stateless_alu_2_1_stateless_alu_0_0_immediate,
          sampling_if_else_raw_stateless_alu_2_1_stateless_alu_0_0_mux1_ctrl,

          sampling_if_else_raw_stateless_alu_2_1_stateless_alu_0_0_mux2_ctrl,

          sampling_if_else_raw_stateless_alu_2_1_stateless_alu_0_0_mux3_ctrl

          );

  // Stateful operands
  int packet_operand_salu0_0_0 =
      sampling_if_else_raw_stateless_alu_2_1_stateful_operand_mux_0_0_0(
          input_0_0,
          sampling_if_else_raw_stateless_alu_2_1_stateful_operand_mux_0_0_0_ctrl);
  int packet_operand_salu0_0_1 =
      sampling_if_else_raw_stateless_alu_2_1_stateful_operand_mux_0_0_1(
          input_0_0,
          sampling_if_else_raw_stateless_alu_2_1_stateful_operand_mux_0_0_1_ctrl);

  // Read stateful ALU slots from allocated state vars.
  if (sampling_if_else_raw_stateless_alu_2_1_salu_config_0_0 == 1) {
    state_operand_salu_0_0 =
        | StateGroup | (state_0 = state_and_packet.state_group_0_state_0);
  }

  // Stateful ALUs
  | StateGroup |
      old_state_group_0_0 = sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0(
      state_operand_salu_0_0,
      sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_output_mux_global,
      packet_operand_salu0_0_0, packet_operand_salu0_0_1,
      sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_Mux3_0_global,
      sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_Mux3_1_global,
      sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_Mux3_2_global,
      sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_Opt_0_global,
      sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_Opt_1_global,
      sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_Opt_2_global,
      sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_const_0_global,
      sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_const_1_global,
      sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_const_2_global,
      sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_output_mux_global,
      sampling_if_else_raw_stateless_alu_2_1_stateful_alu_0_0_rel_op_0_global);

  // Outputs
  int output_0_0 = sampling_if_else_raw_stateless_alu_2_1_output_mux_phv_0_0(
      old_state_group_0_0.state_0, destination_0_0,
      sampling_if_else_raw_stateless_alu_2_1_output_mux_phv_0_0_ctrl);

  // Write state_0
  if (sampling_if_else_raw_stateless_alu_2_1_salu_config_0_0 == 1) {
    state_and_packet.state_group_0_state_0 = state_operand_salu_0_0.state_0;
  }

  /*********** Stage 1 *********/

  // Inputs
  // Input of this stage is the output of the previous one.
  int input_1_0 = output_0_0;

  // Stateless ALUs
  int destination_1_0 =
      sampling_if_else_raw_stateless_alu_2_1_stateless_alu_1_0(
          input_1_0,

          sampling_if_else_raw_stateless_alu_2_1_stateless_alu_1_0_opcode,
          sampling_if_else_raw_stateless_alu_2_1_stateless_alu_1_0_immediate,
          sampling_if_else_raw_stateless_alu_2_1_stateless_alu_1_0_mux1_ctrl,

          sampling_if_else_raw_stateless_alu_2_1_stateless_alu_1_0_mux2_ctrl,

          sampling_if_else_raw_stateless_alu_2_1_stateless_alu_1_0_mux3_ctrl

          );

  // Stateful operands
  int packet_operand_salu1_0_0 =
      sampling_if_else_raw_stateless_alu_2_1_stateful_operand_mux_1_0_0(
          input_1_0,
          sampling_if_else_raw_stateless_alu_2_1_stateful_operand_mux_1_0_0_ctrl);
  int packet_operand_salu1_0_1 =
      sampling_if_else_raw_stateless_alu_2_1_stateful_operand_mux_1_0_1(
          input_1_0,
          sampling_if_else_raw_stateless_alu_2_1_stateful_operand_mux_1_0_1_ctrl);

  // Read stateful ALU slots from allocated state vars.
  if (sampling_if_else_raw_stateless_alu_2_1_salu_config_1_0 == 1) {
    state_operand_salu_1_0 =
        | StateGroup | (state_0 = state_and_packet.state_group_0_state_0);
  }

  // Stateful ALUs
  | StateGroup |
      old_state_group_1_0 = sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0(
      state_operand_salu_1_0,
      sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_output_mux_global,
      packet_operand_salu1_0_0, packet_operand_salu1_0_1,
      sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_Mux3_0_global,
      sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_Mux3_1_global,
      sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_Mux3_2_global,
      sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_Opt_0_global,
      sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_Opt_1_global,
      sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_Opt_2_global,
      sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_const_0_global,
      sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_const_1_global,
      sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_const_2_global,
      sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_output_mux_global,
      sampling_if_else_raw_stateless_alu_2_1_stateful_alu_1_0_rel_op_0_global);

  // Outputs
  int output_1_0 = sampling_if_else_raw_stateless_alu_2_1_output_mux_phv_1_0(
      old_state_group_1_0.state_0, destination_1_0,
      sampling_if_else_raw_stateless_alu_2_1_output_mux_phv_1_0_ctrl);

  // Write state_0
  if (sampling_if_else_raw_stateless_alu_2_1_salu_config_1_0 == 1) {
    state_and_packet.state_group_0_state_0 = state_operand_salu_1_0.state_0;
  }

  // Write pkt_0
  state_and_packet.pkt_0 = output_1_0;

  // Return updated packet fields and state vars
  return state_and_packet;
}

harness void main(int pkt_0, int state_group_0_state_0) {

  | StateAndPacket | x =
      | StateAndPacket |
      (pkt_0 = pkt_0, state_group_0_state_0 = state_group_0_state_0);

  | StateAndPacket | pipeline_result = pipeline(x);
  | StateAndPacket | program_result = program(x);

  assert(pipeline_result.state_group_0_state_0 ==
         program_result.state_group_0_state_0);

  assert(pipeline_result.pkt_0 == program_result.pkt_0);
}
