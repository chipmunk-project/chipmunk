{% if mode == "codegen" %}
|StateAndPacket| pipeline (|StateAndPacket| state_and_packet) implements program {
// Consolidate all constraints on holes here.
{{all_assertions}}
{% elif mode == "optverify" %}
|StateAndPacket| pipeline (|StateAndPacket| state_and_packet, {{hole_arguments|join(',')}}) {
{% endif %}
  // One variable for each container in the PHV
  // Container i will be allocated to packet field i from the spec.
  {% for container_number in range(num_phv_containers) %}
    int input_0_{{container_number}} = 0;
  {% endfor %} 

  // One variable for each stateful ALU's state operand
  // This will be allocated to a state variable from the program using indicator variables.
  {% for stage_number in range(num_pipeline_stages) %}
   {% for state_var_number in range(num_state_vars) %}
    int state_operand_salu_{{stage_number}}_{{state_var_number}};
   {% endfor %}
  {% endfor %}

  {% for stage_number in range(num_pipeline_stages) %}
  /*********** Stage {{stage_number}} *********/

  // Inputs
  {% if stage_number == 0 %}
  // Read each PHV container from corresponding packet field.
  {% for field_number in range(num_fields_in_prog) %}
  input_0_{{field_number}} = state_and_packet.pkt_{{field_number}};
  {% endfor %}

  {% else %}
  // Input of this stage is the output of the previous one.
  {% for container_number in range(num_phv_containers) %}
  int input_{{stage_number}}_{{container_number}} = output_{{stage_number-1}}_{{container_number}};
  {% endfor %}

  {% endif %}

  // Stateless ALUs
  {% for alu_number in range(num_alus_per_stage) %}
  int destination_{{stage_number}}_{{alu_number}} = {{sketch_name}}_stateless_alu_{{stage_number}}_{{alu_number}}(
  {% for container_number in range(num_phv_containers) %}
  {% if container_number != num_phv_containers - 1 %}
  input_{{stage_number}}_{{container_number}},
  {% else %}
  input_{{stage_number}}_{{container_number}}
  {% endif %}
  {% endfor %},
  {{sketch_name}}_stateless_alu_{{stage_number}}_{{alu_number}}_opcode,
  {{sketch_name}}_stateless_alu_{{stage_number}}_{{alu_number}}_immediate,
  {{sketch_name}}_stateless_alu_{{stage_number}}_{{alu_number}}_mode,
  {{sketch_name}}_stateless_alu_{{stage_number}}_{{alu_number}}_mux1_ctrl,
  {{sketch_name}}_stateless_alu_{{stage_number}}_{{alu_number}}_mux2_ctrl
  );
  {% endfor %}

  // Stateful operands
  {% for state_number in range(num_state_vars) %}
  int packet_operand_salu{{stage_number}}_{{state_number}} = {{sketch_name}}_stateful_operand_mux_{{stage_number}}_{{state_number}}(
  {% for container_number in range(num_phv_containers) %}
  {% if container_number != num_phv_containers - 1 %}
  input_{{stage_number}}_{{container_number}},
  {% else %}
  input_{{stage_number}}_{{container_number}}
  {% endif %}
  {% endfor %}
  , {{sketch_name}}_stateful_operand_mux_{{stage_number}}_{{state_number}}_ctrl);
  {% endfor %}

  // Read stateful ALU slots from allocated state vars.
  {% for state_number in range(num_state_vars) %}
  {% if state_number == 0 %}
  if ({{sketch_name}}_salu_config_{{stage_number}}_{{state_number}} == 1) { state_operand_salu_{{stage_number}}_{{state_number}} = state_and_packet.state_{{state_number}};}
  {% else %}
  else if ({{sketch_name}}_salu_config_{{stage_number}}_{{state_number}} == 1) { state_operand_salu_{{stage_number}}_{{state_number}} = state_and_packet.state_{{state_number}};}
  {% endif %}
  {% endfor %}

  // Stateful ALUs
  {% for state_number in range(num_state_vars) %}
  int old_state_{{stage_number}}_{{state_number}} = {{sketch_name}}_stateful_alu_{{stage_number}}_{{state_number}}(state_operand_salu_{{stage_number}}_{{state_number}}, packet_operand_salu{{stage_number}}_{{state_number}},
  {% set prefix_string = sketch_name + "_stateful_alu_" + (stage_number|string) + "_" + (state_number|string) + "_" %}
  {{stateful_alu_hole_arguments|map('add_prefix_suffix', prefix_string, "_global")|join(',')}});
  {% endfor %}

  // Outputs
  {% for container_number in range(num_phv_containers) %}
  int output_{{stage_number}}_{{container_number}} = {{sketch_name}}_output_mux_phv_{{stage_number}}_{{container_number}}(
  {% for state_number in range(num_state_vars) %}
  old_state_{{stage_number}}_{{state_number}},
  {% endfor %}
  destination_{{stage_number}}_{{container_number}},
  {{sketch_name}}_output_mux_phv_{{stage_number}}_{{container_number}}_ctrl
  );
  {% endfor %}

  {% for state_number in range(num_state_vars) %}
  // Write state_{{state_number}}
  {% if state_number == 0 %}
  if ({{sketch_name}}_salu_config_{{stage_number}}_{{state_number}} == 1) { state_and_packet.state_{{state_number}} = state_operand_salu_{{stage_number}}_{{state_number}};}
  {% else %}
  else if ({{sketch_name}}_salu_config_{{stage_number}}_{{state_number}} == 1) { state_and_packet.state_{{state_number}} = state_operand_salu_{{stage_number}}_{{state_number}};}
  {% endif %}
  {% endfor %}

  {% endfor %}

  {% for field_number in range(num_fields_in_prog) %}
  // Write pkt_{{field_number}}
  state_and_packet.pkt_{{field_number}} = output_{{num_pipeline_stages - 1}}_{{field_number}};
  {% endfor %}

  // Return updated packet fields and state vars
  return state_and_packet;
}
